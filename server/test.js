import { LoginSession, EAuthTokenPlatformType } from "steam-session";
import { readFileSync, writeFileSync } from "fs";
import readline from "readline";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
function askQuestion(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) =>
    rl.question(query, (answer) => {
      rl.close();
      resolve(answer);
    })
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ refresh token)
async function firstLogin() {
  const session = new LoginSession(EAuthTokenPlatformType.SteamClient);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
  session.on("steamGuardMachineToken", (token) => {
    console.log("‚úì –ü–æ–ª—É—á–µ–Ω machine token:", token);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º machine token –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (token) {
      writeFileSync("machine_token.txt", token);
      console.log("‚úì Machine token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª");
    }
  });

  session.on("error", (err) => {
    console.log("–û—à–∏–±–∫–∞:", err);
  });

  try {
    console.log("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ Steam...");

    const result = await session.startWithCredentials({
      accountName: "breakersboy3",
      password: "xaFNgT8a",
    });

    if (result.actionRequired) {
      console.log("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
      console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", result.validActions);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –ø–æ type
      const emailAction = result.validActions.find(
        (action) => action.type === 2
      );
      const guardAction = result.validActions.find(
        (action) => action.type === 3
      );

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ Steam Guard –∏–∑ email (type: 2)
      if (emailAction) {
        const emailDomain = emailAction.detail || "–≤–∞—à–µ–≥–æ email";
        const code = await askQuestion(
          `\nüìß –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ email (${emailDomain}): `
        );
        console.log("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...");
        await session.submitSteamGuardCode(code);
      }

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ Steam Guard –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (type: 3)
      if (guardAction) {
        const code = await askQuestion(
          "\nüì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Steam Guard (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ): "
        );
        console.log("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...");
        await session.submitSteamGuardCode(code);
      }
    }

    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await new Promise((resolve, reject) => {
      session.on("authenticated", resolve);
      session.on("error", reject);
    });

    console.log("‚úì –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!");
    console.log("‚úì Refresh Token:", session.refreshToken);
    console.log("‚úì Steam ID:", session.steamID);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤
    writeFileSync("refresh_token.txt", session.refreshToken);
    console.log("‚úì Refresh token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª refresh_token.txt");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π refresh token)
async function loginWithRefreshToken() {
  try {
    const refreshToken = readFileSync("refresh_token.txt", "utf-8").trim();

    const session = new LoginSession(EAuthTokenPlatformType.SteamClient);
    session.refreshToken = refreshToken;

    await session.refreshAccessToken();

    console.log("‚úì –í—Ö–æ–¥ —Å refresh token —É—Å–ø–µ—à–µ–Ω!");
    console.log("‚úì Steam ID:", session.steamID);
    console.log("‚úì Access Token:", session.accessToken);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å refresh token:", error);
  }
}

// –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
firstLogin(); // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
// loginWithRefreshToken(); // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
