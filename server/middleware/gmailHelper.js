import { google } from "googleapis";
import { getAuthenticatedClient } from "./googleapi.js";

/**
 * –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º –∏–∑ Gmail
 * @param {string} refreshToken - Google refresh token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} maxResults - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
 */
export const getRecentEmails = async (refreshToken, maxResults = 10) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OAuth2 –∫–ª–∏–µ–Ω—Ç
    const oauth2Client = getAuthenticatedClient(refreshToken);

    // –°–æ–∑–¥–∞–µ–º Gmail API –∫–ª–∏–µ–Ω—Ç
    const gmail = google.gmail({ version: "v1", auth: oauth2Client });

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
    const response = await gmail.users.messages.list({
      userId: "me",
      maxResults: maxResults,
    });

    const messages = response.data.messages || [];
    const emailDetails = [];

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞
    for (const message of messages) {
      const email = await gmail.users.messages.get({
        userId: "me",
        id: message.id,
      });
      emailDetails.push(email.data);
    }

    return emailDetails;
  } catch (error) {
    console.error("Error fetching emails:", error);
    throw error;
  }
};

/**
 * –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 * @param {string} refreshToken - Google refresh token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} fromEmail - Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
 * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
 */
export const searchEmailsFromSender = async (refreshToken, fromEmail) => {
  try {
    const oauth2Client = getAuthenticatedClient(refreshToken);
    const gmail = google.gmail({ version: "v1", auth: oauth2Client });

    const response = await gmail.users.messages.list({
      userId: "me",
      q: `from:${fromEmail}`,
    });

    return response.data.messages || [];
  } catch (error) {
    console.error("Error searching emails:", error);
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Google
 * @param {string} refreshToken - Google refresh token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const getUserInfo = async (refreshToken) => {
  try {
    const oauth2Client = getAuthenticatedClient(refreshToken);
    const oauth2 = google.oauth2({ version: "v2", auth: oauth2Client });

    const response = await oauth2.userinfo.get();
    return response.data;
  } catch (error) {
    console.error("Error getting user info:", error);
    throw error;
  }
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∏—Å—å–º–∞
 * @param {Object} message - –û–±—ä–µ–∫—Ç –ø–∏—Å—å–º–∞ –æ—Ç Gmail API
 * @returns {string} –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
 */
const getEmailBody = (message) => {
  let plainBody = "";
  let htmlBody = "";

  const extractFromPart = (part) => {
    if (part.body && part.body.data) {
      const decoded = Buffer.from(part.body.data, "base64").toString("utf-8");
      if (part.mimeType === "text/plain") {
        plainBody = decoded;
      } else if (part.mimeType === "text/html") {
        htmlBody = decoded;
      }
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    if (part.parts) {
      part.parts.forEach(extractFromPart);
    }
  };

  if (message.payload.body && message.payload.body.data) {
    plainBody = Buffer.from(message.payload.body.data, "base64").toString(
      "utf-8"
    );
  }

  if (message.payload.parts) {
    message.payload.parts.forEach(extractFromPart);
  }

  // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º plain text, –Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML (—É–¥–∞–ª—è—è —Ç–µ–≥–∏)
  let body = plainBody || htmlBody;

  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ HTML, —É–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
  if (!plainBody && htmlBody) {
    body = htmlBody
      .replace(/<style[^>]*>.*?<\/style>/gis, "")
      .replace(/<script[^>]*>.*?<\/script>/gis, "")
      .replace(/<[^>]+>/g, " ")
      .replace(/&nbsp;/g, " ")
      .replace(/&amp;/g, "&")
      .replace(/&lt;/g, "<")
      .replace(/&gt;/g, ">")
      .replace(/\s+/g, " ");
  }

  return body;
};

/**
 * –ü–æ–∏—Å–∫ –∫–æ–¥–∞ Steam Guard –≤ –ø–∏—Å—å–º–µ
 * @param {string} refreshToken - Google refresh token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} maxAttempts - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞
 * @param {number} delayMs - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<string>} –ö–æ–¥ Steam Guard
 */
export const getSteamGuardCode = async (
  refreshToken,
  maxAttempts = 10,
  delayMs = 3000
) => {
  try {
    const oauth2Client = getAuthenticatedClient(refreshToken);
    const gmail = google.gmail({ version: "v1", auth: oauth2Client });

    // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π, —á—Ç–æ–±—ã –ø–∏—Å—å–º–æ —É—Å–ø–µ–ª–æ –¥–æ–π—Ç–∏
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–∏—Å—å–º–æ –¥–æ—à–ª–æ...");
    await new Promise((resolve) => setTimeout(resolve, 10000));

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(
        `üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}: –ò—â–µ–º –ø–∏—Å—å–º–æ –æ—Ç Steam...`
      );

      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–±–æ–ª–µ–µ –≥–∏–±–∫–æ)
      const searchQueries = [
        `from:noreply@steampowered.com`,
        `from:steampowered.com`,
      ];

      let foundMessages = [];

      for (const query of searchQueries) {
        try {
          const response = await gmail.users.messages.list({
            userId: "me",
            q: query,
            maxResults: 5,
          });

          if (response.data.messages && response.data.messages.length > 0) {
            console.log(
              `‚úì –ù–∞–π–¥–µ–Ω–æ ${response.data.messages.length} –ø–∏—Å–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`
            );
            foundMessages = response.data.messages;
            break;
          }
        } catch (err) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`);
        }
      }

      if (foundMessages.length > 0) {
        // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ (–Ω–æ–≤–æ–µ) –ø–∏—Å—å–º–æ
        const latestMessage = await gmail.users.messages.get({
          userId: "me",
          id: foundMessages[0].id,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–∏—Å—å–º–∞
        const messageTime = parseInt(latestMessage.data.internalDate);
        const now = Date.now();
        const ageMinutes = Math.floor((now - messageTime) / 60000);

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = latestMessage.data.payload.headers;
        const subject = headers.find((h) => h.name === "Subject")?.value || "";
        const from = headers.find((h) => h.name === "From")?.value || "";

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        const emailBody = getEmailBody(latestMessage.data);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ HTML - –∏—â–µ–º –∫–æ–¥ –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Å –±–æ–ª—å—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º
        const findHtmlPart = (parts) => {
          if (!parts) return null;
          for (const part of parts) {
            if (part.mimeType === "text/html" && part.body && part.body.data) {
              return part;
            }
            if (part.parts) {
              const found = findHtmlPart(part.parts);
              if (found) return found;
            }
          }
          return null;
        };

        const htmlPart = latestMessage.data.payload.parts
          ? findHtmlPart(latestMessage.data.payload.parts)
          : latestMessage.data.payload.mimeType === "text/html" &&
            latestMessage.data.payload.body
          ? latestMessage.data.payload
          : null;

        if (htmlPart && htmlPart.body && htmlPart.body.data) {
          const html = Buffer.from(htmlPart.body.data, "base64").toString(
            "utf-8"
          );

          console.log("\nüîç –ò—â–µ–º –∫–æ–¥ –≤ HTML...");

          // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ Steam Guard
          const htmlPatterns = [
            // 1. –ö–æ–¥ –≤ —è—á–µ–π–∫–µ —Å –±–æ–ª—å—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º (48px)
            /font-size:\s*4[0-9]px[^>]*>[\s\n\r\t]*([A-Z0-9]{5})[\s\n\r\t]*</i,
            // 2. –ö–æ–¥ –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º (#3a9aed - —Ü–≤–µ—Ç Steam)
            /#3a9aed[^>]*>[\s\n\r\t]*([A-Z0-9]{5})[\s\n\r\t]*</i,
            // 3. –ö–æ–¥ –≤ –ª—é–±–æ–π —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã (td) —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            /font-weight:\s*bold[^>]*>[\s\n\r\t]*([A-Z0-9]{5})[\s\n\r\t]*</i,
            // 4. –ü—Ä–æ—Å—Ç–æ –∫–æ–¥ –≤ td —Å –±–æ–ª—å—à–∏–º —à—Ä–∏—Ñ—Ç–æ–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            /text-align:\s*center[^>]*font-size:\s*4[0-9]px[^>]*>[\s\n\r\t]*([A-Z0-9]{5})[\s\n\r\t]*</i,
          ];

          for (const pattern of htmlPatterns) {
            const match = html.match(pattern);
            if (match && match[1]) {
              const code = match[1].trim().toUpperCase();
              console.log("‚úì –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ HTML:", code);
              return code;
            }
          }

          console.log(
            "‚ö†Ô∏è –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ HTML –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É..."
          );
        }

        // –ò—â–µ–º –∫–æ–¥ –≤ –æ—á–∏—â–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ - –ª—é–±—ã–µ 5 –±—É–∫–≤/—Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
        const codeMatches = emailBody.match(/\b[A-Za-z0-9]{5}\b/g);

        if (codeMatches && codeMatches.length > 0) {
          console.log(
            `\nüîç –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã (5 —Å–∏–º–≤–æ–ª–æ–≤):`,
            codeMatches
          );

          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥
          const code = codeMatches[0].toUpperCase();
          console.log("‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥:", code);
          return code;
        }

        console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ 5 —Å–∏–º–≤–æ–ª–æ–≤");

        // –ï—Å–ª–∏ –ø–∏—Å—å–º–æ —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (ageMinutes > 15) {
          console.log(
            `‚ö†Ô∏è –ü–∏—Å—å–º–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (${ageMinutes} –º–∏–Ω.), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...`
          );
        } else {
          // –ü–∏—Å—å–º–æ —Å–≤–µ–∂–µ–µ, –Ω–æ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
          console.log(
            "‚ö†Ô∏è –ü–∏—Å—å–º–æ —Å–≤–µ–∂–µ–µ, –Ω–æ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø–∏—Å—å–º–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥?"
          );
        }
      } else {
        console.log("‚ùå –ü–∏—Å—å–º–∞ –æ—Ç Steam –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");

        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∏—Å–µ–º
        if (attempt === 1) {
          try {
            const recentEmails = await gmail.users.messages.list({
              userId: "me",
              maxResults: 5,
            });

            if (recentEmails.data.messages) {
              console.log("\nüì¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∏—Å–µ–º –≤ –ø–æ—á—Ç–µ:");
              for (const msg of recentEmails.data.messages) {
                const details = await gmail.users.messages.get({
                  userId: "me",
                  id: msg.id,
                  format: "metadata",
                  metadataHeaders: ["From", "Subject", "Date"],
                });
                const headers = details.data.payload.headers;
                const from =
                  headers.find((h) => h.name === "From")?.value || "Unknown";
                const subject =
                  headers.find((h) => h.name === "Subject")?.value ||
                  "No subject";
                console.log(`   ‚Ä¢ ${from} - ${subject}`);
              }
            }
          } catch (err) {
            console.log(
              "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º:",
              err.message
            );
          }
        }
      }

      if (attempt < maxAttempts) {
        console.log(
          `‚è≥ –ñ–¥–µ–º ${delayMs / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`
        );
        await new Promise((resolve) => setTimeout(resolve, delayMs));
      }
    }

    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º Steam Guard");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ Steam Guard:", error);
    throw error;
  }
};
