import { LoginSession, EAuthTokenPlatformType } from "steam-session";
import { sequelize } from "../models/index.js";
import { getSteamGuardCode } from "./gmailHelper.js";

export async function firstLogin(idAccount) {
  const session = new LoginSession(EAuthTokenPlatformType.SteamClient);

  session.on("steamGuardMachineToken", (token) => {
    console.log("‚úì –ü–æ–ª—É—á–µ–Ω machine token:", token);
  });

  session.on("error", (err) => {
    console.log("–û—à–∏–±–∫–∞:", err);
  });

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î
    const steamAccount = await sequelize.models.SteamAccount.findByPk(
      idAccount
    );

    if (!steamAccount) {
      throw new Error("Steam account not found");
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const login = steamAccount.steamLogin;
    const password = steamAccount.getDecryptedSteamPassword();

    if (!password) {
      throw new Error("Failed to decrypt steam password");
    }

    const result = await session.startWithCredentials({
      accountName: login,
      password: password,
    });

    if (result.actionRequired) {
      console.log("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
      console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", result.validActions);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –ø–æ type
      const emailAction = result.validActions.find(
        (action) => action.type === 2
      );
      const guardAction = result.validActions.find(
        (action) => action.type === 3
      );

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ Steam Guard –∏–∑ email (type: 2)
      if (emailAction) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å refreshToken –¥–ª—è Gmail
        if (steamAccount.refresh_token) {
          console.log("üîì –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞...");

          try {
            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º refreshToken (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏)
            const decryptedRefreshToken =
              steamAccount.getDecryptedRefreshToken();

            if (!decryptedRefreshToken) {
              return console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å Gmail refresh token");
            }
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ Gmail
            const code = await getSteamGuardCode(decryptedRefreshToken);
            console.log("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥...");
            await session.submitSteamGuardCode(code);
          } catch (error) {
            console.error(
              "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Gmail API:",
              error
            );
          }
        } else {
          return console.log(
            `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—á—Ç–µ ${steamAccount.email}. –ù–µ–æ–±—Ö–æ–¥–∏–º Gmail refresh token.`
          );
        }
      }

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–¥ Steam Guard –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (type: 3)
      if (guardAction) {
        return console.log(
          "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –∏–∑ Steam Guard –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
        );
      }
    }

    // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await new Promise((resolve, reject) => {
      session.on("authenticated", resolve);
      session.on("error", reject);
    });

    console.log("‚úì –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!");
    console.log("‚úì Refresh Token:", session.refreshToken);
    console.log("‚úì Steam ID:", session.steamID);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º Steam refresh token –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await steamAccount.update({
      steam_refresh_token: session.refreshToken,
      steam_id: session.steamID.toString(),
    });

    console.log("‚úì Steam refresh token —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

    return {
      success: true,
    };
  } catch (error) {
    await steamAccount.destroy();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", error);
    return {
      success: false,
      message: "Error in firstLogin",
    };
  }
}

export default firstLogin;
